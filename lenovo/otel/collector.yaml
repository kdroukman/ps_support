extensions:
  health_check:
  zpages:
receivers:
  sapm:
    endpoint: 0.0.0.0:[!!!>>>CHANGE TO YOUR PORT]
  signalfx:
  # This section is used to collect the OpenTelemetry Collector metrics
  # Even if just a SignalFx ÂµAPM customer, these metrics are included
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['localhost:8888']
              # If you want to use the environment filter
              # In the SignalFx dashboard
              #labels:
                #environment: demo
          metric_relabel_configs:
            - source_labels: [ __name__ ]
              regex: '.*grpc_io.*'
              action: drop
  # Enable Zipkin to support Istio Mixer Adapter
  # https://github.com/signalfx/signalfx-istio-adapter
  zipkin:
processors:
  batch:
 # Remove the Query string with sensitive data from URL and create a new tag - http_url
  attributes/sanitize_url:
    actions:
    - key: "http.url"
      pattern: ^(?P<http_url>[^?]*)\??.*
      action: extract
  attributes/delete_url:
    actions:
    - key: "http.url"
      action: delete
  queued_retry:
  # Enabling the memory_limiter is strongly recommended for every pipeline.
  # Configuration is based on the amount of memory allocated to the collector.
  # The configuration below assumes 2GB of memory. In general, the ballast
  # should be set to 1/3 of the collector's memory, the limit should be 90% of
  # the collector's memory up to 2GB, and the spike should be 25% of the
  # collector's memory up to 2GB. In addition, the "--mem-ballast-size-mib" CLI
  # flag must be set to the same value as the "ballast_size_mib". For more
  # information, see
  # https://github.com/open-telemetry/opentelemetry-collector/blob/master/processor/memorylimiter/README.md
  memory_limiter:
    ballast_size_mib: 683
    check_interval: 2s
    limit_mib: 1800
    spike_limit_mib: 500
exporters:
  # Traces
  # If you need to use different tokens, break this down into different exporters, etc: sapm/token1, sapm/token2, etc.
  # Then bellow, create a pipeline for each of the tokens. 
  sapm:
    access_token: "[!!!>>>CHANGE TO YOUR TOKEN]"
    endpoint: "https://ingest.us1.signalfx.com/v2/trace"
  # Metrics
  signalfx:
    access_token: "[!!!>>>CHANGE TO YOUR TOKEN]""
    realm: "us1"
service:
  pipelines:
  # If you are using multiple tokens, add pipelines in the bellow format for each token:
  #  traces/token1:
  #    receivers: [sapm, zipkin]
  #    processors: [attributes/sanitize_url, attributes/delete_url, memory_limiter, batch, queued_retry]
  #    exporters: [sapm/token1]
    traces:
      receivers: [sapm, zipkin]
      processors: [attributes/sanitize_url, attributes/delete_url, memory_limiter, batch, queued_retry]
      exporters: [sapm]
    metrics:
      receivers: [signalfx, prometheus]
      processors: [memory_limiter, batch]
      exporters: [signalfx]
  extensions: [health_check, zpages]
